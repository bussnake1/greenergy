// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Power Plant Outage Models
model MarketDocument {
  id             String       @id @default(uuid())
  mRID           String       @unique // Document ID from XML
  revisionNumber Int // Revision number
  type           String // Document type (A77, A80, etc.)
  processType    String // process.processType
  createdAt      DateTime // createdDateTime from the document
  startTime      DateTime // unavailability_Time_Period.timeInterval start
  endTime        DateTime // unavailability_Time_Period.timeInterval end
  reasonCode     String? // Reason code (B18, B19, etc.)
  timeSeries     TimeSeries[]

  @@index([startTime, endTime])
  @@map("market_documents")
}

model TimeSeries {
  id               String            @id @default(uuid())
  mRID             String // TimeSeries mRID
  businessType     String // businessType (A53, A54, etc.)
  biddingZone      String // biddingZone_Domain.mRID
  startTime        DateTime // start_DateAndOrTime (combined date and time)
  endTime          DateTime // end_DateAndOrTime (combined date and time)
  quantityUnit     String // quantity_Measure_Unit.name (MAW)
  curveType        String // curveType
  resourceMRID     String // production_RegisteredResource.mRID
  resourceName     String // production_RegisteredResource.name
  resourceLocation String? // production_RegisteredResource.location.name
  resourceType     String? // production_RegisteredResource.pSRType.psrType
  powerSystemMRID  String? // production_RegisteredResource.pSRType.powerSystemResources.mRID
  powerSystemName  String? // production_RegisteredResource.pSRType.powerSystemResources.name
  nominalPower     Float? // production_RegisteredResource.pSRType.powerSystemResources.nominalP
  nominalPowerUnit String? // Unit for nominalPower (usually MAW)
  marketDocumentId String            @map("market_document_id")
  marketDocument   MarketDocument    @relation(fields: [marketDocumentId], references: [id], onDelete: Cascade)
  availablePeriods AvailablePeriod[]

  @@index([startTime, endTime])
  @@index([resourceName])
  @@index([resourceLocation])
  @@map("time_series")
}

model AvailablePeriod {
  id           String     @id @default(uuid())
  startTime    DateTime // timeInterval start
  endTime      DateTime // timeInterval end
  resolution   String // resolution (PT15M, PT1M, etc.)
  timeSeriesId String     @map("time_series_id")
  timeSeries   TimeSeries @relation(fields: [timeSeriesId], references: [id], onDelete: Cascade)
  points       Point[]

  @@index([startTime, endTime])
  @@map("available_periods")
}

model Point {
  id                String          @id @default(uuid())
  position          Int // position
  quantity          Float // quantity (available capacity in MAW)
  availablePeriodId String          @map("available_period_id")
  availablePeriod   AvailablePeriod @relation(fields: [availablePeriodId], references: [id], onDelete: Cascade)

  @@map("points")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  apiKeys   ApiKey[] // Relation to API keys

  @@map("users")
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String // A human-readable name for the key
  key        String    @unique // The actual API key token
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime? @map("expires_at") // Optional expiration
  lastUsedAt DateTime? @map("last_used_at") // Track usage
  isActive   Boolean   @default(true) @map("is_active")
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}
